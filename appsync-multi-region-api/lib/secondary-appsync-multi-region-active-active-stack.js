"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecondaryAppsyncMultiRegionActiveActiveStack = void 0;
const cdk = require("aws-cdk-lib");
const lambda = require("aws-cdk-lib/aws-lambda");
const aws_lambda_event_sources_1 = require("aws-cdk-lib/aws-lambda-event-sources");
const dynamodb = require("aws-cdk-lib/aws-dynamodb");
const iam = require("aws-cdk-lib/aws-iam");
const appsync = require("@aws-cdk/aws-appsync-alpha");
const certificatemaanger = require("aws-cdk-lib/aws-certificatemanager");
const route53 = require("aws-cdk-lib/aws-route53");
const path = require("path");
class SecondaryAppsyncMultiRegionActiveActiveStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const currentAppSyncCustomDomain = (props === null || props === void 0 ? void 0 : props.appSyncCustomDomain) ? props.appSyncCustomDomain : '';
        const currentGraphqlAPICertARN = (props === null || props === void 0 ? void 0 : props.graphqlAPIDomainNameCertARN) ? props.graphqlAPIDomainNameCertARN : '';
        const currentTodoAPIHostedZoneID = (props === null || props === void 0 ? void 0 : props.todoAPIHostedZoneID) ? props.todoAPIHostedZoneID : '';
        const currentTodoAPIHostedZoneName = (props === null || props === void 0 ? void 0 : props.todoAPIHostedZoneName) ? props.todoAPIHostedZoneName : '';
        /** PARAMETER FOR TODO GLOBAL TABLE NAME */
        const todoGlobalTableStreamARN = new cdk.CfnParameter(this, "todoGlobalTableStreamARN", {
            type: "String",
            description: "The ARN of the Todo Global Table Stream."
        });
        /** DYNAMO DB TABLE */
        const todoGlobalTable = dynamodb.Table.fromTableAttributes(this, 'TodoGlobalTable', {
            tableName: "TodoGlobalTable",
            tableStreamArn: todoGlobalTableStreamARN.valueAsString
        });
        /** APPSYNC LAMBDA AUTHORIZER */
        const appSyncLambdaAuth = new lambda.Function(this, 'AppSyncLambdaAuth', {
            runtime: lambda.Runtime.NODEJS_16_X,
            handler: 'index.handler',
            code: lambda.Code.fromAsset(path.join(path.resolve('./'), '/lambdas/appsync-auth')),
            tracing: lambda.Tracing.ACTIVE
        });
        /** APPSYNC LOG CONFIG */
        const logConfig = {
            excludeVerboseContent: false,
            fieldLogLevel: appsync.FieldLogLevel.ALL,
        };
        /** APPSYNC API */
        const todoGraphQLAPI = new appsync.GraphqlApi(this, 'TodoGraphQLAPI', {
            name: 'TodoGraphQLAPI',
            schema: appsync.Schema.fromAsset(path.join(path.resolve('./'), '/appsync-api/schema.graphql')),
            authorizationConfig: {
                defaultAuthorization: {
                    authorizationType: appsync.AuthorizationType.LAMBDA,
                    lambdaAuthorizerConfig: {
                        handler: appSyncLambdaAuth
                    }
                }
            },
            logConfig,
            xrayEnabled: true,
        });
        const todoDynamoDBDataSource = todoGraphQLAPI.addDynamoDbDataSource('TodoDynamoDBDataSource', todoGlobalTable);
        const todoNoneDataSource = todoGraphQLAPI.addNoneDataSource('TodoNoneDataSource');
        /** APPSYNC RESOLVERS */
        todoDynamoDBDataSource.createResolver({
            typeName: 'Mutation',
            fieldName: 'addTodo',
            requestMappingTemplate: appsync.MappingTemplate.fromFile('appsync-api/resolvers/Mutation.AddTodo.req.vtl'),
            responseMappingTemplate: appsync.MappingTemplate.fromFile('appsync-api/resolvers/Mutation.AddTodo.resp.vtl')
        });
        todoDynamoDBDataSource.createResolver({
            typeName: 'Mutation',
            fieldName: 'updateTodo',
            requestMappingTemplate: appsync.MappingTemplate.fromFile('appsync-api/resolvers/Mutation.UpdateTodo.req.vtl'),
            responseMappingTemplate: appsync.MappingTemplate.fromFile('appsync-api/resolvers/Mutation.UpdateTodo.resp.vtl')
        });
        todoDynamoDBDataSource.createResolver({
            typeName: 'Mutation',
            fieldName: 'deleteTodo',
            requestMappingTemplate: appsync.MappingTemplate.fromFile('appsync-api/resolvers/Mutation.DeleteTodo.req.vtl'),
            responseMappingTemplate: appsync.MappingTemplate.fromFile('appsync-api/resolvers/Mutation.DeleteTodo.resp.vtl')
        });
        todoNoneDataSource.createResolver({
            typeName: 'Mutation',
            fieldName: 'addTodoGlobalSync',
            requestMappingTemplate: appsync.MappingTemplate.fromFile('appsync-api/resolvers/Mutation.AddTodoGlobalSync.req.vtl'),
            responseMappingTemplate: appsync.MappingTemplate.fromFile('appsync-api/resolvers/Mutation.AddTodoGlobalSync.resp.vtl')
        });
        todoNoneDataSource.createResolver({
            typeName: 'Mutation',
            fieldName: 'deleteTodoGlobalSync',
            requestMappingTemplate: appsync.MappingTemplate.fromFile('appsync-api/resolvers/Mutation.DeleteTodoGlobalSync.req.vtl'),
            responseMappingTemplate: appsync.MappingTemplate.fromFile('appsync-api/resolvers/Mutation.DeleteTodoGlobalSync.resp.vtl')
        });
        todoNoneDataSource.createResolver({
            typeName: 'Mutation',
            fieldName: 'updateTodoGlobalSync',
            requestMappingTemplate: appsync.MappingTemplate.fromFile('appsync-api/resolvers/Mutation.UpdateTodoGlobalSync.req.vtl'),
            responseMappingTemplate: appsync.MappingTemplate.fromFile('appsync-api/resolvers/Mutation.UpdateTodoGlobalSync.resp.vtl')
        });
        todoDynamoDBDataSource.createResolver({
            typeName: 'Query',
            fieldName: 'getTodo',
            requestMappingTemplate: appsync.MappingTemplate.fromFile('appsync-api/resolvers/Query.GetTodo.req.vtl'),
            responseMappingTemplate: appsync.MappingTemplate.fromFile('appsync-api/resolvers/Query.GetTodo.resp.vtl')
        });
        todoDynamoDBDataSource.createResolver({
            typeName: 'Query',
            fieldName: 'listTodos',
            requestMappingTemplate: appsync.MappingTemplate.fromFile('appsync-api/resolvers/Query.ListTodos.req.vtl'),
            responseMappingTemplate: appsync.MappingTemplate.fromFile('appsync-api/resolvers/Query.ListTodos.resp.vtl')
        });
        /**  CONFIGURE CUSTOM DOMAIN */
        const graphqlAPIDomainNameCert = certificatemaanger.Certificate.fromCertificateArn(this, 'GraphqlAPIDomainNameCert', currentGraphqlAPICertARN);
        const graphqlAPICustomDomain = new cdk.aws_appsync.CfnDomainName(this, 'GraphqlAPICustomDomain', {
            certificateArn: graphqlAPIDomainNameCert.certificateArn,
            domainName: currentAppSyncCustomDomain
        });
        const appSyncCustomDomainAssoc = new cdk.aws_appsync.CfnDomainNameApiAssociation(this, 'AppSyncCustomDomainAssoc', {
            apiId: todoGraphQLAPI.apiId,
            domainName: graphqlAPICustomDomain.domainName
        });
        appSyncCustomDomainAssoc.addDependsOn(graphqlAPICustomDomain);
        //Adding Route 53 Records for the custom domain
        const todoAPIDomainNameHostedZone = route53.HostedZone.fromHostedZoneAttributes(this, 'TodoAPIDomainNameHostedZone', {
            hostedZoneId: currentTodoAPIHostedZoneID,
            zoneName: currentTodoAPIHostedZoneName
        });
        const appSyncDNSConfigs = new route53.CnameRecord(this, 'AppSyncDNSConfigs', {
            recordName: currentAppSyncCustomDomain.split('.')[0],
            zone: todoAPIDomainNameHostedZone,
            domainName: graphqlAPICustomDomain.attrAppSyncDomainName
        });
        /**  LAMBDA STREAM PROCESSOR EXECUTION ROLE */
        const todoDDStreamLambdaExecRole = new iam.Role(this, 'TodoDDStreamLambdaExecRole', {
            assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),
            managedPolicies: [
                iam.ManagedPolicy.fromAwsManagedPolicyName('AWSAppSyncInvokeFullAccess'),
                iam.ManagedPolicy.fromAwsManagedPolicyName('CloudWatchLogsFullAccess')
            ]
        });
        /**  LAMBDA STREAM PROCESSOR */
        const todoDDStreamLambda = new lambda.Function(this, 'TodoDDStreamLambda', {
            runtime: lambda.Runtime.NODEJS_16_X,
            handler: 'index.handler',
            code: lambda.Code.fromAsset(path.join(path.resolve('./'), '/lambdas/ddb-stream-processor')),
            role: todoDDStreamLambdaExecRole,
            environment: {
                'AppSyncAPIEndpoint': todoGraphQLAPI.graphqlUrl,
                'AppSyncAPILambdaAuthKey': 'custom-authorized'
            },
            tracing: lambda.Tracing.ACTIVE
        });
        /**  ADD DYNAMO DB STREAM AS EVENT SOURCE TO LAMBDA */
        todoDDStreamLambda.addEventSource(new aws_lambda_event_sources_1.DynamoEventSource(todoGlobalTable, {
            startingPosition: lambda.StartingPosition.TRIM_HORIZON,
        }));
        /** OUTPUT STACK VALUES */
        new cdk.CfnOutput(this, 'API URL', { value: todoGraphQLAPI.graphqlUrl });
        new cdk.CfnOutput(this, 'TODO TABLE ARN', { value: todoGlobalTable.tableArn });
        new cdk.CfnOutput(this, 'LAMBDA ARN', { value: todoDDStreamLambda.functionArn });
    }
}
exports.SecondaryAppsyncMultiRegionActiveActiveStack = SecondaryAppsyncMultiRegionActiveActiveStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Vjb25kYXJ5LWFwcHN5bmMtbXVsdGktcmVnaW9uLWFjdGl2ZS1hY3RpdmUtc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzZWNvbmRhcnktYXBwc3luYy1tdWx0aS1yZWdpb24tYWN0aXZlLWFjdGl2ZS1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtQ0FBbUM7QUFFbkMsaURBQWlEO0FBQ2pELG1GQUF5RTtBQUN6RSxxREFBcUQ7QUFDckQsMkNBQTJDO0FBQzNDLHNEQUFzRDtBQUN0RCx5RUFBeUU7QUFDekUsbURBQW1EO0FBQ25ELDZCQUE0QjtBQVU1QixNQUFhLDRDQUE2QyxTQUFRLEdBQUcsQ0FBQyxLQUFLO0lBQ3ZFLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBeUQ7UUFDakcsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsTUFBTSwwQkFBMEIsR0FBRyxDQUFBLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxtQkFBbUIsRUFBQSxDQUFDLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFBLENBQUMsQ0FBQSxFQUFFLENBQUE7UUFDM0YsTUFBTSx3QkFBd0IsR0FBRyxDQUFBLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSwyQkFBMkIsRUFBQSxDQUFDLENBQUMsS0FBSyxDQUFDLDJCQUEyQixDQUFBLENBQUMsQ0FBQyxFQUFFLENBQUE7UUFDMUcsTUFBTSwwQkFBMEIsR0FBRyxDQUFBLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxtQkFBbUIsRUFBQSxDQUFDLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFBLENBQUMsQ0FBQSxFQUFFLENBQUE7UUFDM0YsTUFBTSw0QkFBNEIsR0FBRyxDQUFBLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxxQkFBcUIsRUFBQSxDQUFDLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFB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LENBQUMsY0FBYyxDQUFDLElBQUksNENBQWlCLENBQUMsZUFBZSxFQUFDO1lBQ3RFLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZO1NBQ3ZELENBQUMsQ0FBQyxDQUFBO1FBRUgsMEJBQTBCO1FBQzFCLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUMsU0FBUyxFQUFFLEVBQUMsS0FBSyxFQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUMsQ0FBQyxDQUFBO1FBQ3BFLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUMsZ0JBQWdCLEVBQUUsRUFBQyxLQUFLLEVBQUMsZUFBZSxDQUFDLFFBQVEsRUFBQyxDQUFDLENBQUE7UUFDMUUsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksRUFBQyxZQUFZLEVBQUUsRUFBQyxLQUFLLEVBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFDLENBQUMsQ0FBQTtJQUU5RSxDQUFDO0NBQ0o7QUFsTEQsb0dBa0xDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0ICogYXMgbGFtYmRhIGZyb20gJ2F3cy1jZGstbGliL2F3cy1sYW1iZGEnO1xuaW1wb3J0IHsgRHluYW1vRXZlbnRTb3VyY2UgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhLWV2ZW50LXNvdXJjZXMnO1xuaW1wb3J0ICogYXMgZHluYW1vZGIgZnJvbSAnYXdzLWNkay1saWIvYXdzLWR5bmFtb2RiJztcbmltcG9ydCAqIGFzIGlhbSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtaWFtJztcbmltcG9ydCAqIGFzIGFwcHN5bmMgZnJvbSAnQGF3cy1jZGsvYXdzLWFwcHN5bmMtYWxwaGEnO1xuaW1wb3J0ICogYXMgY2VydGlmaWNhdGVtYWFuZ2VyIGZyb20gJ2F3cy1jZGstbGliL2F3cy1jZXJ0aWZpY2F0ZW1hbmFnZXInO1xuaW1wb3J0ICogYXMgcm91dGU1MyBmcm9tICdhd3MtY2RrLWxpYi9hd3Mtcm91dGU1Myc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnXG5cbmludGVyZmFjZSBTZWNvbmRhcnlBcHBTeW5jTXVsdGlSZWdpb25BY3RpdmVBY3RpdmVTdGFja1Byb3BzIGV4dGVuZHMgY2RrLlN0YWNrUHJvcHMge1xuICAgIHByaW1hcnlSZWdpb24/OiBzdHJpbmcsXG4gICAgc2Vjb25kYXJ5UmVnaW9uPzogc3RyaW5nLFxuICAgIGFwcFN5bmNDdXN0b21Eb21haW4/OiBzdHJpbmcsXG4gICAgZ3JhcGhxbEFQSURvbWFpbk5hbWVDZXJ0QVJOPzogc3RyaW5nLFxuICAgIHRvZG9BUElIb3N0ZWRab25lSUQ/OiBzdHJpbmcsXG4gICAgdG9kb0FQSUhvc3RlZFpvbmVOYW1lPzogc3RyaW5nXG59XG5leHBvcnQgY2xhc3MgU2Vjb25kYXJ5QXBwc3luY011bHRpUmVnaW9uQWN0aXZlQWN0aXZlU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogU2Vjb25kYXJ5QXBwU3luY011bHRpUmVnaW9uQWN0aXZlQWN0aXZlU3RhY2tQcm9wcykge1xuICAgICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG4gICAgICBcbiAgICAgIGNvbnN0IGN1cnJlbnRBcHBTeW5jQ3VzdG9tRG9tYWluID0gcHJvcHM/LmFwcFN5bmNDdXN0b21Eb21haW4/IHByb3BzLmFwcFN5bmNDdXN0b21Eb21haW46JydcbiAgICAgIGNvbnN0IGN1cnJlbnRHcmFwaHFsQVBJQ2VydEFSTiA9IHByb3BzPy5ncmFwaHFsQVBJRG9tYWluTmFtZUNlcnRBUk4/IHByb3BzLmdyYXBocWxBUElEb21haW5OYW1lQ2VydEFSTjogJydcbiAgICAgIGNvbnN0IGN1cnJlbnRUb2RvQVBJSG9zdGVkWm9uZUlEID0gcHJvcHM/LnRvZG9BUElIb3N0ZWRab25lSUQ/IHByb3BzLnRvZG9BUElIb3N0ZWRab25lSUQ6JydcbiAgICAgIGNvbnN0IGN1cnJlbnRUb2RvQVBJSG9zdGVkWm9uZU5hbWUgPSBwcm9wcz8udG9kb0FQSUhvc3RlZFpvbmVOYW1lPyBwcm9wcy50b2RvQVBJSG9zdGVkWm9uZU5hbWU6JydcblxuICAgICAgLyoqIFBBUkFNRVRFUiBGT1IgVE9ETyBHTE9CQUwgVEFCTEUgTkFNRSAqL1xuICAgICAgY29uc3QgdG9kb0dsb2JhbFRhYmxlU3RyZWFtQVJOID0gbmV3IGNkay5DZm5QYXJhbWV0ZXIodGhpcywgXCJ0b2RvR2xvYmFsVGFibGVTdHJlYW1BUk5cIiwge1xuICAgICAgICB0eXBlOiBcIlN0cmluZ1wiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJUaGUgQVJOIG9mIHRoZSBUb2RvIEdsb2JhbCBUYWJsZSBTdHJlYW0uXCJcbiAgICAgIH0pO1xuXG4gICAgICAvKiogRFlOQU1PIERCIFRBQkxFICovXG4gICAgICBjb25zdCB0b2RvR2xvYmFsVGFibGUgPSBkeW5hbW9kYi5UYWJsZS5mcm9tVGFibGVBdHRyaWJ1dGVzKHRoaXMsICdUb2RvR2xvYmFsVGFibGUnLCB7XG4gICAgICAgIHRhYmxlTmFtZTogXCJUb2RvR2xvYmFsVGFibGVcIixcbiAgICAgICAgdGFibGVTdHJlYW1Bcm46IHRvZG9HbG9iYWxUYWJsZVN0cmVhbUFSTi52YWx1ZUFzU3RyaW5nXG4gICAgICB9KTtcblxuICAgICAgLyoqIEFQUFNZTkMgTEFNQkRBIEFVVEhPUklaRVIgKi9cbiAgICAgIGNvbnN0IGFwcFN5bmNMYW1iZGFBdXRoID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnQXBwU3luY0xhbWJkYUF1dGgnLCB7XG4gICAgICAgIHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lLk5PREVKU18xNl9YLFxuICAgICAgICBoYW5kbGVyOiAnaW5kZXguaGFuZGxlcicsXG4gICAgICAgIGNvZGU6IGxhbWJkYS5Db2RlLmZyb21Bc3NldChwYXRoLmpvaW4ocGF0aC5yZXNvbHZlKCcuLycpLCcvbGFtYmRhcy9hcHBzeW5jLWF1dGgnKSksXG4gICAgICAgIHRyYWNpbmc6IGxhbWJkYS5UcmFjaW5nLkFDVElWRVxuICAgICAgfSk7XG5cbiAgICAgIC8qKiBBUFBTWU5DIExPRyBDT05GSUcgKi8gICAgXG4gICAgICBjb25zdCBsb2dDb25maWc6IGFwcHN5bmMuTG9nQ29uZmlnID0ge1xuICAgICAgICBleGNsdWRlVmVyYm9zZUNvbnRlbnQ6IGZhbHNlLFxuICAgICAgICBmaWVsZExvZ0xldmVsOiBhcHBzeW5jLkZpZWxkTG9nTGV2ZWwuQUxMLFxuICAgICAgfTsgIFxuICBcbiAgICAgIC8qKiBBUFBTWU5DIEFQSSAqL1xuICAgICAgY29uc3QgdG9kb0dyYXBoUUxBUEkgPSBuZXcgYXBwc3luYy5HcmFwaHFsQXBpKHRoaXMsJ1RvZG9HcmFwaFFMQVBJJywge1xuICAgICAgICBuYW1lOiAnVG9kb0dyYXBoUUxBUEknLFxuICAgICAgICBzY2hlbWE6IGFwcHN5bmMuU2NoZW1hLmZyb21Bc3NldChwYXRoLmpvaW4ocGF0aC5yZXNvbHZlKCcuLycpLCcvYXBwc3luYy1hcGkvc2NoZW1hLmdyYXBocWwnKSksXG4gICAgICAgIGF1dGhvcml6YXRpb25Db25maWc6IHtcbiAgICAgICAgICBkZWZhdWx0QXV0aG9yaXphdGlvbjoge1xuICAgICAgICAgICAgYXV0aG9yaXphdGlvblR5cGU6IGFwcHN5bmMuQXV0aG9yaXphdGlvblR5cGUuTEFNQkRBLFxuICAgICAgICAgICAgbGFtYmRhQXV0aG9yaXplckNvbmZpZzoge1xuICAgICAgICAgICAgICBoYW5kbGVyOiBhcHBTeW5jTGFtYmRhQXV0aFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbG9nQ29uZmlnLFxuICAgICAgICB4cmF5RW5hYmxlZDogdHJ1ZSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB0b2RvRHluYW1vREJEYXRhU291cmNlID0gdG9kb0dyYXBoUUxBUEkuYWRkRHluYW1vRGJEYXRhU291cmNlKCdUb2RvRHluYW1vREJEYXRhU291cmNlJywgdG9kb0dsb2JhbFRhYmxlKTtcbiAgICAgIGNvbnN0IHRvZG9Ob25lRGF0YVNvdXJjZSA9IHRvZG9HcmFwaFFMQVBJLmFkZE5vbmVEYXRhU291cmNlKCdUb2RvTm9uZURhdGFTb3VyY2UnKVxuXG4gICAgICAvKiogQVBQU1lOQyBSRVNPTFZFUlMgKi9cbiAgICAgIHRvZG9EeW5hbW9EQkRhdGFTb3VyY2UuY3JlYXRlUmVzb2x2ZXIoe1xuICAgICAgICB0eXBlTmFtZTogJ011dGF0aW9uJyxcbiAgICAgICAgZmllbGROYW1lOiAnYWRkVG9kbycsXG4gICAgICAgIHJlcXVlc3RNYXBwaW5nVGVtcGxhdGU6IGFwcHN5bmMuTWFwcGluZ1RlbXBsYXRlLmZyb21GaWxlKCdhcHBzeW5jLWFwaS9yZXNvbHZlcnMvTXV0YXRpb24uQWRkVG9kby5yZXEudnRsJyksXG4gICAgICAgIHJlc3BvbnNlTWFwcGluZ1RlbXBsYXRlOiBhcHBzeW5jLk1hcHBpbmdUZW1wbGF0ZS5mcm9tRmlsZSgnYXBwc3luYy1hcGkvcmVzb2x2ZXJzL011dGF0aW9uLkFkZFRvZG8ucmVzcC52dGwnKVxuICAgICAgfSk7XG5cbiAgICAgIHRvZG9EeW5hbW9EQkRhdGFTb3VyY2UuY3JlYXRlUmVzb2x2ZXIoe1xuICAgICAgICB0eXBlTmFtZTogJ011dGF0aW9uJyxcbiAgICAgICAgZmllbGROYW1lOiAndXBkYXRlVG9kbycsXG4gICAgICAgIHJlcXVlc3RNYXBwaW5nVGVtcGxhdGU6IGFwcHN5bmMuTWFwcGluZ1RlbXBsYXRlLmZyb21GaWxlKCdhcHBzeW5jLWFwaS9yZXNvbHZlcnMvTXV0YXRpb24uVXBkYXRlVG9kby5yZXEudnRsJyksXG4gICAgICAgIHJlc3BvbnNlTWFwcGluZ1RlbXBsYXRlOiBhcHBzeW5jLk1hcHBpbmdUZW1wbGF0ZS5mcm9tRmlsZSgnYXBwc3luYy1hcGkvcmVzb2x2ZXJzL011dGF0aW9uLlVwZGF0ZVRvZG8ucmVzcC52dGwnKVxuICAgICAgfSk7XG4gIFxuICAgICAgdG9kb0R5bmFtb0RCRGF0YVNvdXJjZS5jcmVhdGVSZXNvbHZlcih7XG4gICAgICAgIHR5cGVOYW1lOiAnTXV0YXRpb24nLFxuICAgICAgICBmaWVsZE5hbWU6ICdkZWxldGVUb2RvJyxcbiAgICAgICAgcmVxdWVzdE1hcHBpbmdUZW1wbGF0ZTogYXBwc3luYy5NYXBwaW5nVGVtcGxhdGUuZnJvbUZpbGUoJ2FwcHN5bmMtYXBpL3Jlc29sdmVycy9NdXRhdGlvbi5EZWxldGVUb2RvLnJlcS52dGwnKSxcbiAgICAgICAgcmVzcG9uc2VNYXBwaW5nVGVtcGxhdGU6IGFwcHN5bmMuTWFwcGluZ1RlbXBsYXRlLmZyb21GaWxlKCdhcHBzeW5jLWFwaS9yZXNvbHZlcnMvTXV0YXRpb24uRGVsZXRlVG9kby5yZXNwLnZ0bCcpXG4gICAgICB9KTtcblxuICAgICAgdG9kb05vbmVEYXRhU291cmNlLmNyZWF0ZVJlc29sdmVyKHtcbiAgICAgICAgdHlwZU5hbWU6ICdNdXRhdGlvbicsXG4gICAgICAgIGZpZWxkTmFtZTogJ2FkZFRvZG9HbG9iYWxTeW5jJyxcbiAgICAgICAgcmVxdWVzdE1hcHBpbmdUZW1wbGF0ZTogYXBwc3luYy5NYXBwaW5nVGVtcGxhdGUuZnJvbUZpbGUoJ2FwcHN5bmMtYXBpL3Jlc29sdmVycy9NdXRhdGlvbi5BZGRUb2RvR2xvYmFsU3luYy5yZXEudnRsJyksXG4gICAgICAgIHJlc3BvbnNlTWFwcGluZ1RlbXBsYXRlOiBhcHBzeW5jLk1hcHBpbmdUZW1wbGF0ZS5mcm9tRmlsZSgnYXBwc3luYy1hcGkvcmVzb2x2ZXJzL011dGF0aW9uLkFkZFRvZG9HbG9iYWxTeW5jLnJlc3AudnRsJylcbiAgICAgIH0pO1xuICBcbiAgICAgIHRvZG9Ob25lRGF0YVNvdXJjZS5jcmVhdGVSZXNvbHZlcih7XG4gICAgICAgIHR5cGVOYW1lOiAnTXV0YXRpb24nLFxuICAgICAgICBmaWVsZE5hbWU6ICdkZWxldGVUb2RvR2xvYmFsU3luYycsXG4gICAgICAgIHJlcXVlc3RNYXBwaW5nVGVtcGxhdGU6IGFwcHN5bmMuTWFwcGluZ1RlbXBsYXRlLmZyb21GaWxlKCdhcHBzeW5jLWFwaS9yZXNvbHZlcnMvTXV0YXRpb24uRGVsZXRlVG9kb0dsb2JhbFN5bmMucmVxLnZ0bCcpLFxuICAgICAgICByZXNwb25zZU1hcHBpbmdUZW1wbGF0ZTogYXBwc3luYy5NYXBwaW5nVGVtcGxhdGUuZnJvbUZpbGUoJ2FwcHN5bmMtYXBpL3Jlc29sdmVycy9NdXRhdGlvbi5EZWxldGVUb2RvR2xvYmFsU3luYy5yZXNwLnZ0bCcpXG4gICAgICB9KTtcblxuICAgICAgdG9kb05vbmVEYXRhU291cmNlLmNyZWF0ZVJlc29sdmVyKHtcbiAgICAgICAgdHlwZU5hbWU6ICdNdXRhdGlvbicsXG4gICAgICAgIGZpZWxkTmFtZTogJ3VwZGF0ZVRvZG9HbG9iYWxTeW5jJyxcbiAgICAgICAgcmVxdWVzdE1hcHBpbmdUZW1wbGF0ZTogYXBwc3luYy5NYXBwaW5nVGVtcGxhdGUuZnJvbUZpbGUoJ2FwcHN5bmMtYXBpL3Jlc29sdmVycy9NdXRhdGlvbi5VcGRhdGVUb2RvR2xvYmFsU3luYy5yZXEudnRsJyksXG4gICAgICAgIHJlc3BvbnNlTWFwcGluZ1RlbXBsYXRlOiBhcHBzeW5jLk1hcHBpbmdUZW1wbGF0ZS5mcm9tRmlsZSgnYXBwc3luYy1hcGkvcmVzb2x2ZXJzL011dGF0aW9uLlVwZGF0ZVRvZG9HbG9iYWxTeW5jLnJlc3AudnRsJylcbiAgICAgIH0pO1xuICBcbiAgICAgIHRvZG9EeW5hbW9EQkRhdGFTb3VyY2UuY3JlYXRlUmVzb2x2ZXIoe1xuICAgICAgICB0eXBlTmFtZTogJ1F1ZXJ5JyxcbiAgICAgICAgZmllbGROYW1lOiAnZ2V0VG9kbycsXG4gICAgICAgIHJlcXVlc3RNYXBwaW5nVGVtcGxhdGU6IGFwcHN5bmMuTWFwcGluZ1RlbXBsYXRlLmZyb21GaWxlKCdhcHBzeW5jLWFwaS9yZXNvbHZlcnMvUXVlcnkuR2V0VG9kby5yZXEudnRsJyksXG4gICAgICAgIHJlc3BvbnNlTWFwcGluZ1RlbXBsYXRlOiBhcHBzeW5jLk1hcHBpbmdUZW1wbGF0ZS5mcm9tRmlsZSgnYXBwc3luYy1hcGkvcmVzb2x2ZXJzL1F1ZXJ5LkdldFRvZG8ucmVzcC52dGwnKVxuICAgICAgfSk7XG4gIFxuICAgICAgdG9kb0R5bmFtb0RCRGF0YVNvdXJjZS5jcmVhdGVSZXNvbHZlcih7XG4gICAgICAgIHR5cGVOYW1lOiAnUXVlcnknLFxuICAgICAgICBmaWVsZE5hbWU6ICdsaXN0VG9kb3MnLFxuICAgICAgICByZXF1ZXN0TWFwcGluZ1RlbXBsYXRlOiBhcHBzeW5jLk1hcHBpbmdUZW1wbGF0ZS5mcm9tRmlsZSgnYXBwc3luYy1hcGkvcmVzb2x2ZXJzL1F1ZXJ5Lkxpc3RUb2Rvcy5yZXEudnRsJyksXG4gICAgICAgIHJlc3BvbnNlTWFwcGluZ1RlbXBsYXRlOiBhcHBzeW5jLk1hcHBpbmdUZW1wbGF0ZS5mcm9tRmlsZSgnYXBwc3luYy1hcGkvcmVzb2x2ZXJzL1F1ZXJ5Lkxpc3RUb2Rvcy5yZXNwLnZ0bCcpXG4gICAgICB9KTtcblxuICAgICAgLyoqICBDT05GSUdVUkUgQ1VTVE9NIERPTUFJTiAqL1xuICAgICAgY29uc3QgZ3JhcGhxbEFQSURvbWFpbk5hbWVDZXJ0ID0gY2VydGlmaWNhdGVtYWFuZ2VyLkNlcnRpZmljYXRlLmZyb21DZXJ0aWZpY2F0ZUFybih0aGlzLCdHcmFwaHFsQVBJRG9tYWluTmFtZUNlcnQnLCBjdXJyZW50R3JhcGhxbEFQSUNlcnRBUk4pXG4gICAgICBjb25zdCBncmFwaHFsQVBJQ3VzdG9tRG9tYWluID0gbmV3IGNkay5hd3NfYXBwc3luYy5DZm5Eb21haW5OYW1lKFxuICAgICAgICB0aGlzLFxuICAgICAgICAnR3JhcGhxbEFQSUN1c3RvbURvbWFpbicsXG4gICAgICAgIHtcbiAgICAgICAgICBjZXJ0aWZpY2F0ZUFybjogZ3JhcGhxbEFQSURvbWFpbk5hbWVDZXJ0LmNlcnRpZmljYXRlQXJuLFxuICAgICAgICAgIGRvbWFpbk5hbWU6IGN1cnJlbnRBcHBTeW5jQ3VzdG9tRG9tYWluXG4gICAgICAgIH1cbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IGFwcFN5bmNDdXN0b21Eb21haW5Bc3NvYyA9IG5ldyBjZGsuYXdzX2FwcHN5bmMuQ2ZuRG9tYWluTmFtZUFwaUFzc29jaWF0aW9uKFxuICAgICAgICB0aGlzLCBcbiAgICAgICAgJ0FwcFN5bmNDdXN0b21Eb21haW5Bc3NvYycsXG4gICAgICAgIHtcbiAgICAgICAgICBhcGlJZDogdG9kb0dyYXBoUUxBUEkuYXBpSWQsXG4gICAgICAgICAgZG9tYWluTmFtZTogZ3JhcGhxbEFQSUN1c3RvbURvbWFpbi5kb21haW5OYW1lXG4gICAgICAgIH1cbiAgICAgICk7XG5cbiAgICAgIGFwcFN5bmNDdXN0b21Eb21haW5Bc3NvYy5hZGREZXBlbmRzT24oZ3JhcGhxbEFQSUN1c3RvbURvbWFpbik7XG5cbiAgICAgIC8vQWRkaW5nIFJvdXRlIDUzIFJlY29yZHMgZm9yIHRoZSBjdXN0b20gZG9tYWluXG4gICAgICBjb25zdCB0b2RvQVBJRG9tYWluTmFtZUhvc3RlZFpvbmUgPSByb3V0ZTUzLkhvc3RlZFpvbmUuZnJvbUhvc3RlZFpvbmVBdHRyaWJ1dGVzKHRoaXMsICdUb2RvQVBJRG9tYWluTmFtZUhvc3RlZFpvbmUnLCB7XG4gICAgICAgIGhvc3RlZFpvbmVJZDogY3VycmVudFRvZG9BUElIb3N0ZWRab25lSUQsXG4gICAgICAgIHpvbmVOYW1lOiBjdXJyZW50VG9kb0FQSUhvc3RlZFpvbmVOYW1lXG4gICAgICB9KTtcbiAgXG4gICAgICBjb25zdCBhcHBTeW5jRE5TQ29uZmlncyA9IG5ldyByb3V0ZTUzLkNuYW1lUmVjb3JkKHRoaXMsICdBcHBTeW5jRE5TQ29uZmlncycse1xuICAgICAgICByZWNvcmROYW1lOiBjdXJyZW50QXBwU3luY0N1c3RvbURvbWFpbi5zcGxpdCgnLicpWzBdLFxuICAgICAgICB6b25lOiB0b2RvQVBJRG9tYWluTmFtZUhvc3RlZFpvbmUsXG4gICAgICAgIGRvbWFpbk5hbWU6IGdyYXBocWxBUElDdXN0b21Eb21haW4uYXR0ckFwcFN5bmNEb21haW5OYW1lXG4gICAgICB9KVxuXG4gICAgICAvKiogIExBTUJEQSBTVFJFQU0gUFJPQ0VTU09SIEVYRUNVVElPTiBST0xFICovXG4gICAgICBjb25zdCB0b2RvRERTdHJlYW1MYW1iZGFFeGVjUm9sZSA9IG5ldyBpYW0uUm9sZSh0aGlzLCdUb2RvRERTdHJlYW1MYW1iZGFFeGVjUm9sZScse1xuICAgICAgICBhc3N1bWVkQnk6IG5ldyBpYW0uU2VydmljZVByaW5jaXBhbCgnbGFtYmRhLmFtYXpvbmF3cy5jb20nKSxcbiAgICAgICAgbWFuYWdlZFBvbGljaWVzOiBbXG4gICAgICAgICAgaWFtLk1hbmFnZWRQb2xpY3kuZnJvbUF3c01hbmFnZWRQb2xpY3lOYW1lKCdBV1NBcHBTeW5jSW52b2tlRnVsbEFjY2VzcycpLFxuICAgICAgICAgIGlhbS5NYW5hZ2VkUG9saWN5LmZyb21Bd3NNYW5hZ2VkUG9saWN5TmFtZSgnQ2xvdWRXYXRjaExvZ3NGdWxsQWNjZXNzJylcbiAgICAgICAgXVxuICAgICAgfSlcblxuICAgICAgLyoqICBMQU1CREEgU1RSRUFNIFBST0NFU1NPUiAqL1xuICAgICAgY29uc3QgdG9kb0REU3RyZWFtTGFtYmRhID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCAnVG9kb0REU3RyZWFtTGFtYmRhJywge1xuICAgICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMTZfWCxcbiAgICAgICAgaGFuZGxlcjogJ2luZGV4LmhhbmRsZXInLFxuICAgICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQocGF0aC5qb2luKHBhdGgucmVzb2x2ZSgnLi8nKSwnL2xhbWJkYXMvZGRiLXN0cmVhbS1wcm9jZXNzb3InKSksXG4gICAgICAgIHJvbGU6IHRvZG9ERFN0cmVhbUxhbWJkYUV4ZWNSb2xlLFxuICAgICAgICBlbnZpcm9ubWVudDoge1xuICAgICAgICAgICdBcHBTeW5jQVBJRW5kcG9pbnQnOiB0b2RvR3JhcGhRTEFQSS5ncmFwaHFsVXJsLFxuICAgICAgICAgICdBcHBTeW5jQVBJTGFtYmRhQXV0aEtleSc6ICdjdXN0b20tYXV0aG9yaXplZCdcbiAgICAgICAgfSxcbiAgICAgICAgdHJhY2luZzogbGFtYmRhLlRyYWNpbmcuQUNUSVZFXG4gICAgICB9KTtcbiAgXG4gICAgICAvKiogIEFERCBEWU5BTU8gREIgU1RSRUFNIEFTIEVWRU5UIFNPVVJDRSBUTyBMQU1CREEgKi9cbiAgICAgIHRvZG9ERFN0cmVhbUxhbWJkYS5hZGRFdmVudFNvdXJjZShuZXcgRHluYW1vRXZlbnRTb3VyY2UodG9kb0dsb2JhbFRhYmxlLHtcbiAgICAgICAgc3RhcnRpbmdQb3NpdGlvbjogbGFtYmRhLlN0YXJ0aW5nUG9zaXRpb24uVFJJTV9IT1JJWk9OLFxuICAgICAgfSkpXG4gIFxuICAgICAgLyoqIE9VVFBVVCBTVEFDSyBWQUxVRVMgKi9cbiAgICAgIG5ldyBjZGsuQ2ZuT3V0cHV0KHRoaXMsJ0FQSSBVUkwnLCB7dmFsdWU6dG9kb0dyYXBoUUxBUEkuZ3JhcGhxbFVybH0pXG4gICAgICBuZXcgY2RrLkNmbk91dHB1dCh0aGlzLCdUT0RPIFRBQkxFIEFSTicsIHt2YWx1ZTp0b2RvR2xvYmFsVGFibGUudGFibGVBcm59KVxuICAgICAgbmV3IGNkay5DZm5PdXRwdXQodGhpcywnTEFNQkRBIEFSTicsIHt2YWx1ZTp0b2RvRERTdHJlYW1MYW1iZGEuZnVuY3Rpb25Bcm59KVxuICAgICAgICBcbiAgICB9XG59Il19