"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppsyncMultiRegionActiveActiveRoutingStack = void 0;
const cdk = require("aws-cdk-lib");
const cloudfront = require("aws-cdk-lib/aws-cloudfront");
const origins = require("aws-cdk-lib/aws-cloudfront-origins");
const lambda = require("aws-cdk-lib/aws-lambda");
const certificatemaanger = require("aws-cdk-lib/aws-certificatemanager");
const route53 = require("aws-cdk-lib/aws-route53");
const path = require("path");
class AppsyncMultiRegionActiveActiveRoutingStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const currentGraphqlAPICertARN = (props === null || props === void 0 ? void 0 : props.graphqlAPIDomainNameCertARN) ? props.graphqlAPIDomainNameCertARN : '';
        const graphqlAPIDomainNameCert = certificatemaanger.Certificate.fromCertificateArn(this, 'GraphqlAPIDomainNameCert', currentGraphqlAPICertARN);
        const currentTodoGlobalAPIDomainName = (props === null || props === void 0 ? void 0 : props.todoGlobalAPIDomainName) ? props.todoGlobalAPIDomainName : '';
        const currentPlaceholderCFOrigin = (props === null || props === void 0 ? void 0 : props.placeholderCFOrigin) ? props.placeholderCFOrigin : '';
        const currentTodoAPIHostedZoneID = (props === null || props === void 0 ? void 0 : props.todoAPIHostedZoneID) ? props.todoAPIHostedZoneID : '';
        const currentTodoAPIHostedZoneName = (props === null || props === void 0 ? void 0 : props.todoAPIHostedZoneName) ? props.todoAPIHostedZoneName : '';
        const currentRegionLatencyRoutingDNS = (props === null || props === void 0 ? void 0 : props.regionLatencyRoutingDNS) ? props.regionLatencyRoutingDNS : '';
        const currentPrimaryAppSyncAPIRegionName = (props === null || props === void 0 ? void 0 : props.primaryAppSyncAPIRegionName) ? props.primaryAppSyncAPIRegionName : '';
        const currentSecondaryAppSyncAPIRegionName = (props === null || props === void 0 ? void 0 : props.secondaryAppSyncAPIRegionName) ? props.secondaryAppSyncAPIRegionName : '';
        /** LAMBDA @ EDGE FUNCTION FOR THE CLOUDFRONT DISTRIBUTION ROUTING */
        const routingLambda = new lambda.Function(this, 'TodoAPIRoutingLambda', {
            runtime: lambda.Runtime.NODEJS_16_X,
            handler: 'index.handler',
            code: lambda.Code.fromAsset(path.join(path.resolve('./'), '/lambdas/appsync-globalapi-router')),
            tracing: lambda.Tracing.ACTIVE
        });
        /** CLOUDFRONT DISTRIBUTION FOR THE GLOBAL API ENDPOINT */
        const todoAPICFDist = new cloudfront.Distribution(this, 'TodoAPICFDist', {
            defaultBehavior: {
                origin: new origins.HttpOrigin(currentPlaceholderCFOrigin),
                allowedMethods: cloudfront.AllowedMethods.ALLOW_ALL,
                viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.ALLOW_ALL,
                compress: true,
                smoothStreaming: false,
                cachePolicy: cloudfront.CachePolicy.CACHING_DISABLED,
                originRequestPolicy: cloudfront.OriginRequestPolicy.ALL_VIEWER,
                edgeLambdas: [
                    {
                        functionVersion: routingLambda.currentVersion,
                        eventType: cloudfront.LambdaEdgeEventType.ORIGIN_REQUEST,
                        includeBody: true,
                    }
                ]
            },
            certificate: graphqlAPIDomainNameCert,
            domainNames: [currentTodoGlobalAPIDomainName]
        });
        /** ROUTE 53 CONFIGS FOR THE GLOBAL API ENDPOINT AND APPSYNC CUSTOM DOMAINS */
        const todoAPIDomainNameHostedZone = route53.HostedZone.fromHostedZoneAttributes(this, 'TodoAPIDomainNameHostedZone', {
            hostedZoneId: currentTodoAPIHostedZoneID,
            zoneName: currentTodoAPIHostedZoneName
        });
        const todoGlobalAPIDNSConfig = new route53.CnameRecord(this, 'TodoGlobalAPIDNSConfig', {
            recordName: currentTodoGlobalAPIDomainName.split('.')[0],
            zone: todoAPIDomainNameHostedZone,
            domainName: todoAPICFDist.domainName
        });
        /** CREATE LATENCY RECORD SETS */
        const primaryRegionLatencyRoutingConfig = new route53.CfnRecordSet(this, 'PrimaryRegionLatencyRoutingConfig', {
            hostedZoneId: currentTodoAPIHostedZoneID,
            name: currentRegionLatencyRoutingDNS,
            type: route53.RecordType.CNAME,
            region: currentPrimaryAppSyncAPIRegionName,
            setIdentifier: '1',
            resourceRecords: [currentPrimaryAppSyncAPIRegionName],
            ttl: '300'
        });
        const secondaryRegionLatencyRoutingConfig = new route53.CfnRecordSet(this, 'SecondaryRegionLatencyRoutingConfig', {
            hostedZoneId: currentTodoAPIHostedZoneID,
            name: currentRegionLatencyRoutingDNS,
            type: route53.RecordType.CNAME,
            region: currentSecondaryAppSyncAPIRegionName,
            setIdentifier: '2',
            resourceRecords: [currentSecondaryAppSyncAPIRegionName],
            ttl: '300'
        });
    }
}
exports.AppsyncMultiRegionActiveActiveRoutingStack = AppsyncMultiRegionActiveActiveRoutingStack;
//# sourceMappingURL=data:application/json;base64,