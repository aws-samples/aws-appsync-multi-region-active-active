#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const cdk = require("aws-cdk-lib");
const appsync_multi_region_active_active_stack_1 = require("../lib/appsync-multi-region-active-active-stack");
const secondary_appsync_multi_region_active_active_stack_1 = require("../lib/secondary-appsync-multi-region-active-active-stack");
const appsync_multi_region_active_active_routing_stack_1 = require("../lib/appsync-multi-region-active-active-routing-stack");
const globalVariables_1 = require("../parameters/globalVariables");
const cdk_nag_1 = require("cdk-nag");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const app = new cdk.App();
aws_cdk_lib_1.Aspects.of(app).add(new cdk_nag_1.AwsSolutionsChecks({ verbose: true }));
new appsync_multi_region_active_active_stack_1.AppsyncMultiRegionActiveActiveStack(app, 'AppsyncMultiRegionActiveActiveStack', {
    env: { region: globalVariables_1.globalVariables.primaryRegion },
    primaryRegion: globalVariables_1.globalVariables.primaryRegion,
    secondaryRegion: globalVariables_1.globalVariables.secondaryRegion,
    appSyncCustomDomain: globalVariables_1.globalVariables.primaryRegionAppSyncCustomDomain,
    graphqlAPIDomainNameCertARN: globalVariables_1.globalVariables.domainCertARN,
    todoAPIHostedZoneID: globalVariables_1.globalVariables.route53HostedZoneID,
    todoAPIHostedZoneName: globalVariables_1.globalVariables.route53HostedZoneName,
});
new secondary_appsync_multi_region_active_active_stack_1.SecondaryAppsyncMultiRegionActiveActiveStack(app, 'SecondaryAppsyncMultiRegionActiveActiveStack', {
    env: { region: globalVariables_1.globalVariables.secondaryRegion },
    primaryRegion: globalVariables_1.globalVariables.primaryRegion,
    secondaryRegion: globalVariables_1.globalVariables.secondaryRegion,
    appSyncCustomDomain: globalVariables_1.globalVariables.secondaryRegionAppSyncCustomDomain,
    graphqlAPIDomainNameCertARN: globalVariables_1.globalVariables.domainCertARN,
    todoAPIHostedZoneID: globalVariables_1.globalVariables.route53HostedZoneID,
    todoAPIHostedZoneName: globalVariables_1.globalVariables.route53HostedZoneName
});
new appsync_multi_region_active_active_routing_stack_1.AppsyncMultiRegionActiveActiveRoutingStack(app, 'AppsyncMultiRegionActiveActiveRoutingStack', {
    env: { region: 'us-east-1' },
    /* Params below are required to configure the CF distribution however the params for Lambda@edge configuration are kept
    within the lambda package  /lambdas/appsync-globalapi-router/configs.json. This is the because Lambda@edge does not support env. variables
    and given these value don't change frequently, it makes sense to place them within the lambda function vs making a network call which
    will introduce latency */
    graphqlAPIDomainNameCertARN: globalVariables_1.globalVariables.domainCertARN,
    todoGlobalAPIDomainName: globalVariables_1.globalVariables.globalAPIEndpoint,
    regionLatencyRoutingDNS: globalVariables_1.globalVariables.route53RoutingPolicyDomainName,
    placeholderCFOrigin: 'aws.amazon.com',
    todoAPIHostedZoneID: globalVariables_1.globalVariables.route53HostedZoneID,
    todoAPIHostedZoneName: globalVariables_1.globalVariables.route53HostedZoneName,
    primaryAppSyncAPIRegionName: globalVariables_1.globalVariables.primaryRegion,
    secondaryAppSyncAPIRegionName: globalVariables_1.globalVariables.secondaryRegion,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwc3luYy1tdWx0aS1yZWdpb24tYWN0aXZlLWFjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFwcHN5bmMtbXVsdGktcmVnaW9uLWFjdGl2ZS1hY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsdUNBQXFDO0FBQ3JDLG1DQUFtQztBQUNuQyw4R0FBc0c7QUFDdEcsa0lBQXlIO0FBQ3pILDhIQUFxSDtBQUNySCxtRUFBZ0U7QUFDaEUscUNBQTZDO0FBQzdDLDZDQUFzQztBQUV0QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUUxQixxQkFBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSw0QkFBa0IsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFFOUQsSUFBSSw4RUFBbUMsQ0FBQyxHQUFHLEVBQUUscUNBQXFDLEVBQUU7SUFDbEYsR0FBRyxFQUFFLEVBQUMsTUFBTSxFQUFFLGlDQUFlLENBQUMsYUFBYSxFQUFFO0lBQzdDLGFBQWEsRUFBRSxpQ0FBZSxDQUFDLGFBQWE7SUFDNUMsZUFBZSxFQUFFLGlDQUFlLENBQUMsZUFBZTtJQUNoRCxtQkFBbUIsRUFBRSxpQ0FBZSxDQUFDLGdDQUFnQztJQUNyRSwyQkFBMkIsRUFBRSxpQ0FBZSxDQUFDLGFBQWE7SUFDMUQsbUJBQW1CLEVBQUUsaUNBQWUsQ0FBQyxtQkFBbUI7SUFDeEQscUJBQXFCLEVBQUUsaUNBQWUsQ0FBQyxxQkFBcUI7Q0FFN0QsQ0FBQyxDQUFDO0FBRUgsSUFBSSxpR0FBNEMsQ0FBQyxHQUFHLEVBQUUsOENBQThDLEVBQUU7SUFDcEcsR0FBRyxFQUFFLEVBQUMsTUFBTSxFQUFFLGlDQUFlLENBQUMsZUFBZSxFQUFFO0lBQy9DLGFBQWEsRUFBRSxpQ0FBZSxDQUFDLGFBQWE7SUFDNUMsZUFBZSxFQUFFLGlDQUFlLENBQUMsZUFBZTtJQUNoRCxtQkFBbUIsRUFBRSxpQ0FBZSxDQUFDLGtDQUFrQztJQUN2RSwyQkFBMkIsRUFBRSxpQ0FBZSxDQUFDLGFBQWE7SUFDMUQsbUJBQW1CLEVBQUUsaUNBQWUsQ0FBQyxtQkFBbUI7SUFDeEQscUJBQXFCLEVBQUUsaUNBQWUsQ0FBQyxxQkFBcUI7Q0FDN0QsQ0FBQyxDQUFDO0FBR0gsSUFBSSw2RkFBMEMsQ0FBQyxHQUFHLEVBQUUsNENBQTRDLEVBQUU7SUFDaEcsR0FBRyxFQUFFLEVBQUMsTUFBTSxFQUFFLFdBQVcsRUFBRTtJQUUzQjs7OzZCQUd5QjtJQUV6QiwyQkFBMkIsRUFBRSxpQ0FBZSxDQUFDLGFBQWE7SUFDMUQsdUJBQXVCLEVBQUUsaUNBQWUsQ0FBQyxpQkFBaUI7SUFDMUQsdUJBQXVCLEVBQUUsaUNBQWUsQ0FBQyw4QkFBOEI7SUFDdkUsbUJBQW1CLEVBQUUsZ0JBQWdCO0lBQ3JDLG1CQUFtQixFQUFFLGlDQUFlLENBQUMsbUJBQW1CO0lBQ3hELHFCQUFxQixFQUFFLGlDQUFlLENBQUMscUJBQXFCO0lBQzVELDJCQUEyQixFQUFFLGlDQUFlLENBQUMsYUFBYTtJQUMxRCw2QkFBNkIsRUFBRSxpQ0FBZSxDQUFDLGVBQWU7Q0FFL0QsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuaW1wb3J0ICdzb3VyY2UtbWFwLXN1cHBvcnQvcmVnaXN0ZXInO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IEFwcHN5bmNNdWx0aVJlZ2lvbkFjdGl2ZUFjdGl2ZVN0YWNrIH0gZnJvbSAnLi4vbGliL2FwcHN5bmMtbXVsdGktcmVnaW9uLWFjdGl2ZS1hY3RpdmUtc3RhY2snO1xuaW1wb3J0IHsgU2Vjb25kYXJ5QXBwc3luY011bHRpUmVnaW9uQWN0aXZlQWN0aXZlU3RhY2sgfSBmcm9tICcuLi9saWIvc2Vjb25kYXJ5LWFwcHN5bmMtbXVsdGktcmVnaW9uLWFjdGl2ZS1hY3RpdmUtc3RhY2snO1xuaW1wb3J0IHsgQXBwc3luY011bHRpUmVnaW9uQWN0aXZlQWN0aXZlUm91dGluZ1N0YWNrIH0gZnJvbSAnLi4vbGliL2FwcHN5bmMtbXVsdGktcmVnaW9uLWFjdGl2ZS1hY3RpdmUtcm91dGluZy1zdGFjayc7XG5pbXBvcnQgeyBnbG9iYWxWYXJpYWJsZXMgfSBmcm9tICcuLi9wYXJhbWV0ZXJzL2dsb2JhbFZhcmlhYmxlcyc7XG5pbXBvcnQgeyBBd3NTb2x1dGlvbnNDaGVja3MgfSBmcm9tICdjZGstbmFnJztcbmltcG9ydCB7IEFzcGVjdHMgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5cbkFzcGVjdHMub2YoYXBwKS5hZGQobmV3IEF3c1NvbHV0aW9uc0NoZWNrcyh7IHZlcmJvc2U6IHRydWUgfSkpXG5cbm5ldyBBcHBzeW5jTXVsdGlSZWdpb25BY3RpdmVBY3RpdmVTdGFjayhhcHAsICdBcHBzeW5jTXVsdGlSZWdpb25BY3RpdmVBY3RpdmVTdGFjaycsIHtcbiAgZW52OiB7cmVnaW9uOiBnbG9iYWxWYXJpYWJsZXMucHJpbWFyeVJlZ2lvbiB9LFxuICBwcmltYXJ5UmVnaW9uOiBnbG9iYWxWYXJpYWJsZXMucHJpbWFyeVJlZ2lvbixcbiAgc2Vjb25kYXJ5UmVnaW9uOiBnbG9iYWxWYXJpYWJsZXMuc2Vjb25kYXJ5UmVnaW9uLFxuICBhcHBTeW5jQ3VzdG9tRG9tYWluOiBnbG9iYWxWYXJpYWJsZXMucHJpbWFyeVJlZ2lvbkFwcFN5bmNDdXN0b21Eb21haW4sXG4gIGdyYXBocWxBUElEb21haW5OYW1lQ2VydEFSTjogZ2xvYmFsVmFyaWFibGVzLmRvbWFpbkNlcnRBUk4sXG4gIHRvZG9BUElIb3N0ZWRab25lSUQ6IGdsb2JhbFZhcmlhYmxlcy5yb3V0ZTUzSG9zdGVkWm9uZUlELFxuICB0b2RvQVBJSG9zdGVkWm9uZU5hbWU6IGdsb2JhbFZhcmlhYmxlcy5yb3V0ZTUzSG9zdGVkWm9uZU5hbWUsXG4gIFxufSk7XG5cbm5ldyBTZWNvbmRhcnlBcHBzeW5jTXVsdGlSZWdpb25BY3RpdmVBY3RpdmVTdGFjayhhcHAsICdTZWNvbmRhcnlBcHBzeW5jTXVsdGlSZWdpb25BY3RpdmVBY3RpdmVTdGFjaycsIHtcbiAgZW52OiB7cmVnaW9uOiBnbG9iYWxWYXJpYWJsZXMuc2Vjb25kYXJ5UmVnaW9uIH0sXG4gIHByaW1hcnlSZWdpb246IGdsb2JhbFZhcmlhYmxlcy5wcmltYXJ5UmVnaW9uLFxuICBzZWNvbmRhcnlSZWdpb246IGdsb2JhbFZhcmlhYmxlcy5zZWNvbmRhcnlSZWdpb24sXG4gIGFwcFN5bmNDdXN0b21Eb21haW46IGdsb2JhbFZhcmlhYmxlcy5zZWNvbmRhcnlSZWdpb25BcHBTeW5jQ3VzdG9tRG9tYWluLFxuICBncmFwaHFsQVBJRG9tYWluTmFtZUNlcnRBUk46IGdsb2JhbFZhcmlhYmxlcy5kb21haW5DZXJ0QVJOLFxuICB0b2RvQVBJSG9zdGVkWm9uZUlEOiBnbG9iYWxWYXJpYWJsZXMucm91dGU1M0hvc3RlZFpvbmVJRCxcbiAgdG9kb0FQSUhvc3RlZFpvbmVOYW1lOiBnbG9iYWxWYXJpYWJsZXMucm91dGU1M0hvc3RlZFpvbmVOYW1lXG59KTtcblxuXG5uZXcgQXBwc3luY011bHRpUmVnaW9uQWN0aXZlQWN0aXZlUm91dGluZ1N0YWNrKGFwcCwgJ0FwcHN5bmNNdWx0aVJlZ2lvbkFjdGl2ZUFjdGl2ZVJvdXRpbmdTdGFjaycsIHtcbiAgZW52OiB7cmVnaW9uOiAndXMtZWFzdC0xJyB9LFxuXG4gIC8qIFBhcmFtcyBiZWxvdyBhcmUgcmVxdWlyZWQgdG8gY29uZmlndXJlIHRoZSBDRiBkaXN0cmlidXRpb24gaG93ZXZlciB0aGUgcGFyYW1zIGZvciBMYW1iZGFAZWRnZSBjb25maWd1cmF0aW9uIGFyZSBrZXB0IFxuICB3aXRoaW4gdGhlIGxhbWJkYSBwYWNrYWdlICAvbGFtYmRhcy9hcHBzeW5jLWdsb2JhbGFwaS1yb3V0ZXIvY29uZmlncy5qc29uLiBUaGlzIGlzIHRoZSBiZWNhdXNlIExhbWJkYUBlZGdlIGRvZXMgbm90IHN1cHBvcnQgZW52LiB2YXJpYWJsZXNcbiAgYW5kIGdpdmVuIHRoZXNlIHZhbHVlIGRvbid0IGNoYW5nZSBmcmVxdWVudGx5LCBpdCBtYWtlcyBzZW5zZSB0byBwbGFjZSB0aGVtIHdpdGhpbiB0aGUgbGFtYmRhIGZ1bmN0aW9uIHZzIG1ha2luZyBhIG5ldHdvcmsgY2FsbCB3aGljaCBcbiAgd2lsbCBpbnRyb2R1Y2UgbGF0ZW5jeSAqL1xuICBcbiAgZ3JhcGhxbEFQSURvbWFpbk5hbWVDZXJ0QVJOOiBnbG9iYWxWYXJpYWJsZXMuZG9tYWluQ2VydEFSTixcbiAgdG9kb0dsb2JhbEFQSURvbWFpbk5hbWU6IGdsb2JhbFZhcmlhYmxlcy5nbG9iYWxBUElFbmRwb2ludCxcbiAgcmVnaW9uTGF0ZW5jeVJvdXRpbmdETlM6IGdsb2JhbFZhcmlhYmxlcy5yb3V0ZTUzUm91dGluZ1BvbGljeURvbWFpbk5hbWUsXG4gIHBsYWNlaG9sZGVyQ0ZPcmlnaW46ICdhd3MuYW1hem9uLmNvbScsIC8vIFRoaXMgcGFyYW1ldGVyIGlzIG9ubHkgcmVxdWlyZWQgYmVjYXVzZSB3ZSBuZWVkIHRvIHNwZWNpZnkgYW4gb3JpZ2luIHNvIHlvdSBjYW4gdXNlIGFueSBkb21haW4gbmFtZSBvZiB5b3VyIGNob2ljZS4gTGFtYmRhQEVkZ2Ugd2lsbCBhbnl3YXkgcm91dGUgdGhlIHRyYWZmaWMgdG8gQXBwU3luYyBhcyB0aGUgb3JpZ2luXG4gIHRvZG9BUElIb3N0ZWRab25lSUQ6IGdsb2JhbFZhcmlhYmxlcy5yb3V0ZTUzSG9zdGVkWm9uZUlELFxuICB0b2RvQVBJSG9zdGVkWm9uZU5hbWU6IGdsb2JhbFZhcmlhYmxlcy5yb3V0ZTUzSG9zdGVkWm9uZU5hbWUsXG4gIHByaW1hcnlBcHBTeW5jQVBJUmVnaW9uTmFtZTogZ2xvYmFsVmFyaWFibGVzLnByaW1hcnlSZWdpb24sXG4gIHNlY29uZGFyeUFwcFN5bmNBUElSZWdpb25OYW1lOiBnbG9iYWxWYXJpYWJsZXMuc2Vjb25kYXJ5UmVnaW9uLFxuXG59KTsiXX0=